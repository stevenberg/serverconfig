---
- name: configure sshd
  copy:
    src: sshd_config
    dest: /etc/ssh/sshd_config
  notify:
    - restart ssh

- name: upload ssh ca key
  copy:
    content: "{{ ssh_ca_key }}"
    dest: /etc/ssh/ca.key
    mode: 0600
  notify:
    - restart ssh

- name: upload ssh ca pubkey
  copy:
    content: "{{ ssh_ca_pubkey }}"
    dest: /etc/ssh/ca.pub
  notify:
    - restart ssh

- name: sign ssh host keys
  command: ssh-keygen -s /etc/ssh/ca.key -h -n {{ ansible_fqdn }},{{ ssh_ipv4_address }},{{ ssh_ipv6_address }} -I {{ ansible_fqdn }}-key /etc/ssh/{{ item.key }}
  args:
    creates: /etc/ssh/{{ item.cert }}
  with_items:
    - key: ssh_host_ed25519_key.pub
      cert: ssh_host_ed25519_key-cert.pub
    - key: ssh_host_rsa_key.pub
      cert: ssh_host_rsa_key-cert.pub
  notify:
    - restart ssh

- name: delete unused ssh host keys
  file:
    path: /etc/ssh/{{ item }}
    state: absent
  with_items:
    - ssh_host_dsa_key
    - ssh_host_dsa_key.pub
    - ssh_host_ecdsa_key
    - ssh_host_ecdsa_key.pub

- name: configure hosts
  template:
    src: hosts.j2
    dest: /etc/hosts

- name: configure unattended upgrades
  lineinfile:
    dest: /etc/apt/apt.conf.d/50unattended-upgrades
    regexp: Unattended-Upgrade::Mail
    line: Unattended-Upgrade::Mail "root";

- name: install apt keys from url
  apt_key:
    url: "{{ item }}"
  with_items: "{{ common_apt_key_urls + apt_key_urls }}"

- name: install apt keys from keyservers
  apt_key:
    keyserver: "{{ item.server }}"
    id: "{{ item.id }}"
  with_items: "{{ apt_keyservers }}"

- name: install apt repositories
  apt_repository:
    repo: "{{ item }}"
    update_cache: no
  with_items: "{{ common_apt_repositories + apt_repositories }}"

- name: upgrade packages
  apt:
    update_cache: yes
    upgrade: dist

- name: install common packages
  apt:
    name: "{{ item }}"
    state: latest
    update_cache: no
  with_items: "{{ common_apt_packages + apt_packages }}"

- name: set ruby2.4 as default ruby
  alternatives:
    name: "{{ item }}"
    path: /usr/bin/{{ item }}2.4
  with_items:
    - gem
    - ruby

- name: create pkg directory
  file:
    path: /root/pkg
    state: directory

- name: download ripgrep archive
  get_url:
    url: https://github.com/BurntSushi/ripgrep/releases/download/0.4.0/ripgrep-0.4.0-x86_64-unknown-linux-musl.tar.gz
    dest: /root/pkg/ripgrep-0.4.0-x86_64-unknown-linux-musl.tar.gz

- name: unarchive ripgrep archive
  unarchive:
    src: /root/pkg/ripgrep-0.4.0-x86_64-unknown-linux-musl.tar.gz
    dest: /root/pkg
    remote_src: yes

- name: install ripgrep
  copy:
    src: /root/pkg/ripgrep-0.4.0-x86_64-unknown-linux-musl/rg
    dest: /usr/local/bin/rg
    mode: 0755
    remote_src: yes

- name: create tarsnap key
  shell: echo '{{ tarsnap_password }}' | tarsnap-keygen --keyfile /root/tarsnap.key --user steven@stevenberg.net --machine {{ ansible_fqdn }}
  args:
    creates: /root/tarsnap.key

- name: install tarsnap config file
  copy:
    src: tarsnap.conf
    dest: /usr/local/etc/tarsnap.conf

- name: install tarsnap backup cron script
  template:
    src: tarsnap-backup.j2
    dest: /etc/cron.daily/tarsnap-backup
    mode: 0755

- name: install gems
  gem:
    name: "{{ item }}"
    state: latest
    user_install: no
  with_items:
    - snitcher
    - rake

- name: create man1 directory
  file:
    path: /usr/local/man/man1
    state: directory

- name: download spiped archive
  get_url:
    url: http://www.tarsnap.com/spiped/spiped-1.5.0.tgz
    dest: /root/pkg/spiped-1.5.0.tar.gz

- name: unarchive spiped archive
  unarchive:
    src: /root/pkg/spiped-1.5.0.tar.gz
    dest: /root/pkg
    remote_src: yes

- name: install spiped
  command: make BINDIR=/usr/local/bin MAN1DIR=/usr/local/man/man1 install
  args:
    chdir: /root/pkg/spiped-1.5.0
    creates: /usr/local/bin/spiped

- name: create /etc/spiped
  file:
    path: /etc/spiped
    state: directory

- name: create spiped-ssh key
  command: dd if=/dev/urandom of=/etc/spiped/ssh.key bs=32 count=1
  args:
    creates: /etc/spiped/ssh.key
  notify:
    - restart spiped-ssh

- name: restrict access to spiped-ssh key
  file:
    path: /etc/spiped/ssh.key
    mode: 0600

- name: install spiped-ssh service
  copy:
    src: spiped-ssh.service
    dest: /etc/systemd/system/spiped-ssh.service
  notify:
    - reload services
    - restart spiped-ssh

- name: enable spiped-ssh service
  service:
    name: spiped-ssh
    enabled: yes

- name: fetch spiped-ssh key
  fetch:
    src: /etc/spiped/ssh.key
    dest: ~/.ssh/spiped_{{ ansible_fqdn }}_key
    flat: yes
    fail_on_missing: yes

- name: configure firewall
  ufw:
    rule: allow
    port: "{{ item.port }}"
    proto: "{{ item.proto }}"
    from: "{{ item.host }}"
  with_items: "{{ common_firewall_rules + firewall_rules }}"
